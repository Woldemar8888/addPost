{"version":3,"sources":["actions/addPost.js","actions/editPost.js","actions/deletePost.js","components/Post.jsx","components/Posts.jsx","containers/App.js","serviceWorker.js","reducers/addPost.js","reducers/combine.js","index.js"],"names":["addPostAction","post","type","payload","editPostAction","obj","deletePostAction","id","Post","props","useState","editMode","setEditMode","text","setText","className","defaultValue","onChange","e","target","value","onClick","editPost","alert","number","deletePost","time","Posts","posts","map","index","key","connect","state","addPostReducers","dispatch","addPost","onSubmit","preventDefault","Date","toLocaleTimeString","placeholder","Boolean","window","location","hostname","match","initialState","action","stateCopy","push","splice","allReducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49d1e027.chunk.js","sourcesContent":["\r\nconst addPostAction =( post )=>{\r\n    return {\r\n        type: 'ADD_POST',\r\n        payload: post\r\n    }\r\n}\r\n\r\nexport default addPostAction;","const editPostAction =( obj )=>{\r\n    return {\r\n        type: 'EDIT_POST',\r\n        payload: obj\r\n    }\r\n}\r\n\r\nexport default editPostAction;","const deletePostAction =( id )=>{\r\n    return {\r\n        type: 'DELETE_POST',\r\n        payload: id\r\n    }\r\n}\r\n\r\nexport default deletePostAction;","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst Post =(props)=>{\r\n    const [editMode,setEditMode] = useState(false);\r\n    const [text,setText] = useState(props.text);\r\n    const editComment=()=>{\r\n        setEditMode(true);\r\n    }\r\n    \r\n    const saveComment=()=>{\r\n        setEditMode(false);\r\n        if(text){\r\n            props.editPost({\r\n            text,\r\n            id: props.id\r\n        })}\r\n        else alert('if you want to remove the post click delete!')\r\n    }\r\n    \r\n    const handleChange =(e)=>{\r\n        return setText(e.target.value);\r\n    }\r\n    \r\n    const deletePost =()=>{\r\n        props.deletePost(props.id);\r\n    }\r\n\r\n    return (\r\n        <div className=\"post\">\r\n            {editMode ? \r\n                <div className=\"editForm\">\r\n                    <textarea defaultValue ={text} onChange={handleChange}/>\r\n                    <button onClick={saveComment}>Save</button>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <h3>Post: {props.number}</h3>\r\n                    {props.text}\r\n                    <div className= \"buttons\">\r\n                        <button onClick={editComment}>Edit</button>\r\n                        <button onClick={ deletePost}>Delete</button>\r\n                    </div>\r\n                    <div className=\"time\">{props.time}</div>\r\n                </div>\r\n             }    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from './Post';\r\n\r\nconst Posts =(props)=>{\r\n    const posts = props.posts.map((post, index)=>{\r\n        return (\r\n            <Post \r\n               text={post.text} \r\n               time={post.time}\r\n               key={index}\r\n               number={index+1}\r\n               editPost={props.editPost}\r\n               deletePost={props.deletePost}\r\n               id={index}\r\n            />  \r\n        )\r\n    })\r\n    \r\n    return (\r\n        <div>\r\n            {posts}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Posts;","import React, { useState } from 'react';\nimport '../App.css';\nimport { connect } from 'react-redux';\nimport addPostAction from '../actions/addPost';\nimport editPostAction from '../actions/editPost';\nimport deletePostAction from '../actions/deletePost';\nimport Posts from '../components/Posts';\n\nconst App=(props)=>{\n    const [text, setText] = useState('');\n    const handleChange =(e)=>{\n        return setText(e.target.value);\n    }\n    const handleSubmit =(e)=>{\n        e.preventDefault();\n        if(text){\n            props.addPost({\n                text,\n                time: new Date().toLocaleTimeString()\n            });\n            setText('');\n        } \n    }\n    \n    return (\n        <div className=\"appWrapper\">\n            <form onSubmit={handleSubmit}>\n                <textarea value={text} placeholder=\"type here\" onChange={handleChange} />\n                <input type=\"submit\" value=\"add post\"/>\n            </form>\n            <Posts posts={props.posts} editPost={props.editPost} deletePost={props.deletePost}/>\n        </div> \n    )\n}\n\nconst  mapStateToProps =( state )=>{\n    return { \n        text: state.addPostReducers.text,\n        time: state.addPostReducers.time,\n        posts: state.addPostReducers.posts\n    }\n}\n\nconst mapDispatchToProps =(dispatch)=>{\n    return {\n            addPost: (post)=>{\n                dispatch(addPostAction(post))\n            },\n            editPost: ( obj )=>{\n                dispatch(editPostAction(obj))\n            },\n            deletePost: (id)=>{\n                dispatch(deletePostAction(id))\n            }\n        }\n    }\n\nexport default connect( mapStateToProps, mapDispatchToProps )(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    text: 'Hurray',\r\n    time: new Date().toLocaleTimeString(),\r\n    posts: [\r\n        {\r\n        text: 'Hurray',\r\n        time: new Date().toLocaleTimeString()\r\n        }       \r\n    ]\r\n}\r\n\r\nconst addPostReducers =(state=initialState, action)=>{\r\n       switch(action.type){\r\n        case 'ADD_POST': {\r\n            let stateCopy = {...state};\r\n            stateCopy.posts = [...state.posts];\r\n            stateCopy.posts.push(action.payload);   \r\n            return stateCopy;\r\n        }\r\n        case 'EDIT_POST': {\r\n            let stateCopy = {...state};\r\n            stateCopy.posts = [...state.posts];\r\n            stateCopy.posts[action.payload.id].text = action.payload.text;\r\n            return stateCopy;\r\n        }\r\n        case 'DELETE_POST': {\r\n            let stateCopy = {...state};\r\n            stateCopy.posts = [...state.posts];\r\n            stateCopy.posts.splice(action.payload.id, 1)\r\n            return stateCopy; \r\n           }      \r\n        default :\r\n            return state     \r\n    }\r\n}\r\nexport default addPostReducers ;","import { combineReducers} from 'redux';\r\nimport addPostReducers from './addPost'\r\n\r\nconst allReducers = combineReducers({\r\n   addPostReducers \r\n});\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport allReducers from './reducers/combine';\n\n\nconst store = createStore(allReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}